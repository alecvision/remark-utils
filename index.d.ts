import type { Node } from "unist";
import type { PhrasingContent, StaticPhrasingContent, BlockContent, DefinitionContent, TopLevelContent, Resource, Alternative, Association, Paragraph, Literal, Reference, HTML, Blockquote, LinkReference, Break, Code, Emphasis, Strong, Image, List, ListItem, Table, TableRow, TableCell, Definition, Delete, Footnote, FootnoteReference, FootnoteDefinition, Heading, ImageReference, InlineCode, Link, Text, ThematicBreak, YAML } from "mdast";
export declare const isParent: (node: Node) => node is import("unist").Parent<Node<import("unist").Data>, import("unist").Data>;
export declare const isLiteral: (node: Node) => node is Literal;
export declare const extendsResource: (node: Node) => node is Node<import("unist").Data> & Resource;
export declare const extendsAlternative: (node: Node) => node is Node<import("unist").Data> & Alternative;
export declare const extendsReference: (node: Node) => node is Node<import("unist").Data> & Reference;
export declare const extendsAssociation: (node: Node) => node is Node<import("unist").Data> & Association;
export declare const isPhrasingContent: (node: Node) => node is PhrasingContent;
export declare const isStaticPhrasingContent: (node: Node) => node is StaticPhrasingContent;
export declare const isBlockContent: (node: Node) => node is BlockContent;
export declare const isDefinitionContent: (node: Node) => node is DefinitionContent;
export declare const isFrontmatterContent: (node: Node) => node is YAML;
export declare const isListContent: (node: Node) => node is ListItem;
export declare const isRowContent: (node: Node) => node is TableCell;
export declare const isTableContent: (node: Node) => node is TableRow;
export declare const isTopLevelContent: (node: Node) => node is TopLevelContent;
export declare const isParagraph: import("unist-util-is").AssertPredicate<Paragraph>;
export declare const isHTML: import("unist-util-is").AssertPredicate<HTML>;
export declare const isBlockQuote: import("unist-util-is").AssertPredicate<Blockquote>;
export declare const isReference: import("unist-util-is").AssertPredicate<LinkReference>;
export declare const isBreak: import("unist-util-is").AssertPredicate<Break>;
export declare const isCode: import("unist-util-is").AssertPredicate<Code>;
export declare const isEmphasis: import("unist-util-is").AssertPredicate<Emphasis>;
export declare const isStrong: import("unist-util-is").AssertPredicate<Strong>;
export declare const isImage: import("unist-util-is").AssertPredicate<Image>;
export declare const isList: import("unist-util-is").AssertPredicate<List>;
export declare const isListItem: import("unist-util-is").AssertPredicate<ListItem>;
export declare const isTable: import("unist-util-is").AssertPredicate<Table>;
export declare const isTableRow: import("unist-util-is").AssertPredicate<TableRow>;
export declare const isTableCell: import("unist-util-is").AssertPredicate<TableCell>;
export declare const isDefinition: import("unist-util-is").AssertPredicate<Definition>;
export declare const isDelete: import("unist-util-is").AssertPredicate<Delete>;
export declare const isFootnote: import("unist-util-is").AssertPredicate<Footnote>;
export declare const isFootnoteReference: import("unist-util-is").AssertPredicate<FootnoteReference>;
export declare const isFootnoteDefinition: import("unist-util-is").AssertPredicate<FootnoteDefinition>;
export declare const isHeading: import("unist-util-is").AssertPredicate<Heading>;
export declare const isImageReference: import("unist-util-is").AssertPredicate<ImageReference>;
export declare const isInlineCode: import("unist-util-is").AssertPredicate<InlineCode>;
export declare const isLink: import("unist-util-is").AssertPredicate<Link>;
export declare const isText: import("unist-util-is").AssertPredicate<Text>;
export declare const isThematicBreak: import("unist-util-is").AssertPredicate<ThematicBreak>;
export declare const isYAML: import("unist-util-is").AssertPredicate<YAML>;
declare const _default: {
    readonly isParagraph: import("unist-util-is").AssertPredicate<Paragraph>;
    readonly isHTML: import("unist-util-is").AssertPredicate<HTML>;
    readonly isBlockQuote: import("unist-util-is").AssertPredicate<Blockquote>;
    readonly isReference: import("unist-util-is").AssertPredicate<LinkReference>;
    readonly isBreak: import("unist-util-is").AssertPredicate<Break>;
    readonly isCode: import("unist-util-is").AssertPredicate<Code>;
    readonly isEmphasis: import("unist-util-is").AssertPredicate<Emphasis>;
    readonly isStrong: import("unist-util-is").AssertPredicate<Strong>;
    readonly isImage: import("unist-util-is").AssertPredicate<Image>;
    readonly isList: import("unist-util-is").AssertPredicate<List>;
    readonly isListItem: import("unist-util-is").AssertPredicate<ListItem>;
    readonly isTable: import("unist-util-is").AssertPredicate<Table>;
    readonly isTableRow: import("unist-util-is").AssertPredicate<TableRow>;
    readonly isTableCell: import("unist-util-is").AssertPredicate<TableCell>;
    readonly isDefinition: import("unist-util-is").AssertPredicate<Definition>;
    readonly isDelete: import("unist-util-is").AssertPredicate<Delete>;
    readonly isFootnote: import("unist-util-is").AssertPredicate<Footnote>;
    readonly isFootnoteReference: import("unist-util-is").AssertPredicate<FootnoteReference>;
    readonly isFootnoteDefinition: import("unist-util-is").AssertPredicate<FootnoteDefinition>;
    readonly isHeading: import("unist-util-is").AssertPredicate<Heading>;
    readonly isImageReference: import("unist-util-is").AssertPredicate<ImageReference>;
    readonly isInlineCode: import("unist-util-is").AssertPredicate<InlineCode>;
    readonly isLink: import("unist-util-is").AssertPredicate<Link>;
    readonly isText: import("unist-util-is").AssertPredicate<Text>;
    readonly isThematicBreak: import("unist-util-is").AssertPredicate<ThematicBreak>;
    readonly isYAML: import("unist-util-is").AssertPredicate<YAML>;
    readonly isParent: (node: Node<import("unist").Data>) => node is import("unist").Parent<Node<import("unist").Data>, import("unist").Data>;
    readonly isLiteral: (node: Node<import("unist").Data>) => node is Literal;
    readonly extendsResource: (node: Node<import("unist").Data>) => node is Node<import("unist").Data> & Resource;
    readonly extendsAlternative: (node: Node<import("unist").Data>) => node is Node<import("unist").Data> & Alternative;
    readonly extendsReference: (node: Node<import("unist").Data>) => node is Node<import("unist").Data> & Reference;
    readonly extendsAssociation: (node: Node<import("unist").Data>) => node is Node<import("unist").Data> & Association;
    readonly isPhrasingContent: (node: Node<import("unist").Data>) => node is PhrasingContent;
    readonly isStaticPhrasingContent: (node: Node<import("unist").Data>) => node is StaticPhrasingContent;
    readonly isBlockContent: (node: Node<import("unist").Data>) => node is BlockContent;
    readonly isDefinitionContent: (node: Node<import("unist").Data>) => node is DefinitionContent;
    readonly isFrontmatterContent: (node: Node<import("unist").Data>) => node is YAML;
    readonly isListContent: (node: Node<import("unist").Data>) => node is ListItem;
    readonly isRowContent: (node: Node<import("unist").Data>) => node is TableCell;
    readonly isTableContent: (node: Node<import("unist").Data>) => node is TableRow;
    readonly isTopLevelContent: (node: Node<import("unist").Data>) => node is TopLevelContent;
};
export default _default;
//# sourceMappingURL=index.d.ts.map